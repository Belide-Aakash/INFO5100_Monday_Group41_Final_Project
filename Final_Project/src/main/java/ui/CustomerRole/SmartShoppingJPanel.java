/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.CustomerRole;

import Business.AdvManagement.AdvertisementCatalog;
import Business.AdvManagement.AdvertisementDisplay;
import Business.Enterprise.SuperMarketEnterprise;
import Business.ProductManagement.BestStoreFinder;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author aakashbelide
 */
public class SmartShoppingJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    List<SuperMarketEnterprise> supermarkets;
    Set<String> allProductList;
    UserAccount userAccount;
    ArrayList<ArrayList<Object>> currentOrder = new ArrayList<>();
    AdvertisementCatalog custAdvList;
    AdvertisementDisplay adDisplay;
    
    /**
     * Creates new form CustomerCartJPanel
     */
    public SmartShoppingJPanel(JPanel userProcessContainer, List<SuperMarketEnterprise> supermarkets, Set<String> allProductList, UserAccount userAccount, AdvertisementCatalog custAdvList) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.supermarkets = supermarkets;
        this.allProductList = allProductList;
        this.userAccount = userAccount;
        this.custAdvList = custAdvList;
        
        JTableHeader header = tblProductNames.getTableHeader();
        JTableHeader header1 = tblCart.getTableHeader();
        
        // Customize the header background and text color
        header.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                
                JLabel label = (JLabel) super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
                
                // Set background color
                label.setBackground(new Color(0,153,255)  );
                // Set text color
                label.setForeground(Color.WHITE);
                // Set font style and size
                label.setFont(new Font("Helvetica Neue", Font.BOLD, 14));
                
                return label;
            }
        });
        
        populateProdTable();
        populateCartTable();
        
        // Start the advertisements
        startAdv();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductNames = new javax.swing.JTable();
        lblQuantity = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        btnCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnModify = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        txtModifyQuant = new javax.swing.JTextField();
        imageAdvertisement = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));

        btnBack.setBackground(new java.awt.Color(0, 153, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        Title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Smart Shopping");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(btnBack)
                .addGap(62, 62, 62)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title)
                    .addComponent(btnBack))
                .addGap(38, 38, 38))
        );

        btnSearch.setBackground(new java.awt.Color(0, 153, 255));
        btnSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search Product");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblProductNames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Products Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductNames);

        lblQuantity.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblQuantity.setText("Quantity :");

        btnCart.setBackground(new java.awt.Color(0, 153, 255));
        btnCart.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnCart.setForeground(new java.awt.Color(255, 255, 255));
        btnCart.setText("Add to Cart");
        btnCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Product Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        btnModify.setBackground(new java.awt.Color(0, 153, 255));
        btnModify.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnModify.setForeground(new java.awt.Color(255, 255, 255));
        btnModify.setText("Modify Quantity");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCheckout.setBackground(new java.awt.Color(0, 153, 255));
        btnCheckout.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnCheckout.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        imageAdvertisement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageAdvertisement.setText("<Advertisement>");
        imageAdvertisement.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        btnRefresh.setBackground(new java.awt.Color(0, 153, 255));
        btnRefresh.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Refresh Catalog");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtModifyQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCart, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(imageAdvertisement, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnRefresh))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCart)
                            .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemove)
                            .addComponent(btnModify)
                            .addComponent(txtModifyQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnCheckout))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageAdvertisement, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                        .addGap(70, 70, 70)))
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        
        int orderSize = this.currentOrder.size();
        if (orderSize != 0) {
            ArrayList<ArrayList<Object>> tmpCartItems = this.currentOrder;
            for (ArrayList<Object> cartItem : this.currentOrder) {
                this.currentOrder.remove(cartItem);
            }
        }
        
        // Stop the advertisements
        stopAdv();
        
        this.userProcessContainer.remove(this);
        Component[] componentArray = this.userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerWorkAreaJPanel customerWorkAreaJPanel = (CustomerWorkAreaJPanel) component;
        customerWorkAreaJPanel.startAdv();
        CardLayout layout = (CardLayout) this.userProcessContainer.getLayout();
        layout.previous(this.userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblProductNames.getSelectedRow();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // This is the supplier stock from supplier catalog
        String selectedProdName = (String) tblProductNames.getValueAt(selectedRowIndex, 0);
        int quant = 0;
        
        try {
            quant = (Integer) spnQuantity.getValue();
            if (!(quant > 0)) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than 0.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide a valid quantity.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<Object> itemInCart = findCartItem(selectedProdName);
        
        if (itemInCart != null) {
            itemInCart.remove(1);
            itemInCart.add(quant);
        } else {
            ArrayList<Object> newCartItem = new ArrayList<Object>();
            newCartItem.add(selectedProdName);
            newCartItem.add(quant);
            currentOrder.add(newCartItem);
        }
        
        populateCartTable();
    }//GEN-LAST:event_btnCartActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchProd = txtSearch.getText();
        
        if (searchProd.isBlank()) {
            JOptionPane.showMessageDialog(this, "Type something in the input box to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        populateProdTable(searchProd);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateProdTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cart item first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String modQuant = txtModifyQuant.getText();
        if (modQuant.isBlank()) {
            JOptionPane.showMessageDialog(this, "Modify quantity cannot be empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String selectedCartProdName = (String) tblCart.getValueAt(selectedRowIndex, 0);
        ArrayList<Object> selectedCartItem = findCartItem(selectedCartProdName);
        
        if (selectedCartItem == null) {
            JOptionPane.showMessageDialog(this, "Cart item not found.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int quant = 0;
        
        try {
            quant = Integer.parseInt(modQuant);
            if (!(quant > 0)) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than 0.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide a valid quantity.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        selectedCartItem.remove(1);
        selectedCartItem.add(quant);
        populateCartTable();
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cart item first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String selectedCartProdName = (String) tblCart.getValueAt(selectedRowIndex, 0);
        ArrayList<Object> selectedCartItem = findCartItem(selectedCartProdName);
        
        if (selectedCartItem == null) {
            JOptionPane.showMessageDialog(this, "Cart item not found.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        this.currentOrder.remove(selectedCartItem);
        populateCartTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        
        if (!(this.currentOrder.size() > 0)) {
            JOptionPane.showMessageDialog(this, "Cart is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Map<String, Integer> requestedProducts = new HashMap<>();
        
        for (ArrayList<Object> catItem : this.currentOrder) {
            if (catItem.size() >= 2 && catItem.get(0) instanceof String && catItem.get(1) instanceof Integer) {
                String productName = (String) catItem.get(0);
                int quantity = (Integer) catItem.get(1);

                // Accumulate quantities if the product already exists in the map
                requestedProducts.put(productName, requestedProducts.getOrDefault(productName, 0) + quantity);
            }
        }
        
        // Find the best stores
        Map<String, Object> result = BestStoreFinder.findBestStores(supermarkets, requestedProducts, this.userAccount.getCustLatLong(), "Price");
        
        // Stop the advertisements
        stopAdv();
        
        ViewOrderTotalJPanel viewOrderTotalJPanel = new ViewOrderTotalJPanel(this.userProcessContainer,result, this.userAccount, this.custAdvList);
        this.userProcessContainer.add("ViewOrderTotalJPanel",viewOrderTotalJPanel);
        CardLayout layout=(CardLayout)this.userProcessContainer.getLayout();
        layout.next(this.userProcessContainer);
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void populateProdTable() {
        DefaultTableModel model = (DefaultTableModel) tblProductNames.getModel();
        model.setRowCount(0);

        for (String prodName : this.allProductList) {
            Object row[] = new Object[1];
            row[0] = prodName;
            model.addRow(row);
        }
    }
    
    private void populateProdTable(String searchProd) {
        DefaultTableModel model = (DefaultTableModel) tblProductNames.getModel();
        model.setRowCount(0);

        for (String prodName : this.allProductList) {
            if (prodName.equalsIgnoreCase(searchProd)) {
                Object row[] = new Object[1];
                row[0] = prodName;
                model.addRow(row);
            }
        }
    }
    
    private void populateCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);

        for (ArrayList<Object> cartItem : this.currentOrder) {
            Object row[] = new Object[2];
            row[0] = cartItem.get(0);
            row[1] = cartItem.get(1);
            model.addRow(row);
        }
    }
    
    private ArrayList<Object> findCartItem(String prodName) {
        for (ArrayList<Object> cartItem : this.currentOrder) {
            if (cartItem.get(0).equals(prodName)) {
                return cartItem;
            }
        }
        return null;
    }
    
    public void resetCart() {
        currentOrder = new ArrayList<>();
        populateCartTable();
    }
    
    public void startAdv() {
        // Initialize and start the AdvertisementDisplay thread
        adDisplay = new AdvertisementDisplay(this.custAdvList, imageAdvertisement, this.userAccount.getUsername());
    }
    
    public void stopAdv() {
        // Stop the running advertisements
        this.adDisplay.stopAdvertisementDisplay();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCart;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel imageAdvertisement;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductNames;
    private javax.swing.JTextField txtModifyQuant;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
