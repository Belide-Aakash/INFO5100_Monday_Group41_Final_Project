/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.CustomerRole;

import Business.AdvManagement.AdvertisementCatalog;
import Business.AdvManagement.AdvertisementDisplay;
import Business.Enterprise.SuperMarketEnterprise;
import static Business.OrderManagement.Mailer.sendEmail;
import Business.OrderManagement.Order;
import Business.OrderManagement.OrderItem;
import Business.ProductManagement.Product;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author aakashbelide
 */
public class ShoppingJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    List<SuperMarketEnterprise> allSupermarkets;
    UserAccount userAccount;
    AdvertisementCatalog custAdvList;
    Order currentOrder;
    AdvertisementDisplay adDisplay;
    
    /**
     * Creates new form ShoppingJPanel
     */
    public ShoppingJPanel(JPanel userProcessContainer, List<SuperMarketEnterprise> allSupermarkets, UserAccount userAccount, AdvertisementCatalog custAdvList) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.allSupermarkets = allSupermarkets;
        this.userAccount = userAccount;
        this.custAdvList = custAdvList;
        this.currentOrder = this.userAccount.getCustOrders().newOrder();
        
        // Start the advertisements
        startAdv();
        
        // Get the table header
        JTableHeader header = tblProductNames.getTableHeader();
        JTableHeader header1 = tblCart.getTableHeader();
        
        // Customize the header background and text color
        header.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                
                JLabel label = (JLabel) super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
                
                // Set background color
                label.setBackground(new Color(0,153,255)  );
                // Set text color
                label.setForeground(Color.WHITE);
                // Set font style and size
                label.setFont(new Font("Helvetica Neue", Font.BOLD, 14));
                
                return label;
            }
        });
        
       
        
        populateSupMarketCombobox();
        populateSupMarketProdTable();
        populateCartTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        lblSuperMarket = new javax.swing.JLabel();
        cmbSuperMarket = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductNames = new javax.swing.JTable();
        lblQuantity = new javax.swing.JLabel();
        spnQuantity = new javax.swing.JSpinner();
        btnCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnModify = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        txtModifyQuant = new javax.swing.JTextField();
        imageAdvertisement = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));

        btnBack.setBackground(new java.awt.Color(0, 153, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        Title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Start Shopping");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(btnBack)
                .addGap(56, 56, 56)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title)
                    .addComponent(btnBack))
                .addGap(38, 38, 38))
        );

        lblSuperMarket.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblSuperMarket.setText("Super Market:");

        cmbSuperMarket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSuperMarketActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(0, 153, 255));
        btnSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search Product");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblProductNames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Products Name", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductNames);

        lblQuantity.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblQuantity.setText("Quantity :");

        btnCart.setBackground(new java.awt.Color(0, 153, 255));
        btnCart.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnCart.setForeground(new java.awt.Color(255, 255, 255));
        btnCart.setText("Add to Cart");
        btnCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Quantity", "Price", "Total Price", "Super Market"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        btnModify.setBackground(new java.awt.Color(0, 153, 255));
        btnModify.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnModify.setForeground(new java.awt.Color(255, 255, 255));
        btnModify.setText("Modify Quantity");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCheckout.setBackground(new java.awt.Color(0, 153, 255));
        btnCheckout.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnCheckout.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        imageAdvertisement.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageAdvertisement.setText("<Advertisement>");
        imageAdvertisement.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSuperMarket)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSuperMarket, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtModifyQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCart, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(31, 31, 31)
                .addComponent(imageAdvertisement, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(cmbSuperMarket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSuperMarket))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCart)
                            .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemove)
                            .addComponent(btnModify)
                            .addComponent(txtModifyQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnCheckout))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imageAdvertisement, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                        .addGap(70, 70, 70)))
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        int orderSize = this.currentOrder.getOrderSize();
        if (orderSize != 0) {
            ArrayList<OrderItem> tmpOrderItems = this.currentOrder.getOrderItems();
            for (OrderItem orderItem : tmpOrderItems) {
                this.currentOrder.removeOrderItemProdQuant(orderItem);
            }
            this.currentOrder = this.userAccount.getCustOrders().newOrder();
        }
        
        // Stop the advertisements
        stopAdv();
        
        this.userProcessContainer.remove(this);
        Component[] componentArray = this.userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerWorkAreaJPanel customerWorkAreaJPanel = (CustomerWorkAreaJPanel) component;
        customerWorkAreaJPanel.startAdv();
        CardLayout layout = (CardLayout) this.userProcessContainer.getLayout();
        layout.previous(this.userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String searchProd = txtSearch.getText();
        SuperMarketEnterprise selectedSuperMarket = (SuperMarketEnterprise) cmbSuperMarket.getSelectedItem();
        
        if (selectedSuperMarket == null) {
            JOptionPane.showMessageDialog(this, "Select a super market from the drop down.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (searchProd.isBlank()) {
            JOptionPane.showMessageDialog(this, "Type something in the input box to search.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        populateSupMarketProdTable(searchProd, selectedSuperMarket);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblProductNames.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        SuperMarketEnterprise selectedSuperMarket = (SuperMarketEnterprise) cmbSuperMarket.getSelectedItem();
        
        if (selectedSuperMarket == null) {
            JOptionPane.showMessageDialog(this, "Select a super market from the drop down.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // This is the supplier stock from supplier catalog
        Product selectedProd = (Product) tblProductNames.getValueAt(selectedRowIndex, 0);
        int quant = 0;
        
        try {
            quant = (Integer) spnQuantity.getValue();
            if (!(quant > 0)) {
                JOptionPane.showMessageDialog(this, "Quantity should be greater than 0.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide a valid quantity.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        OrderItem itemInCart = this.currentOrder.findOrderItem(selectedProd);
        
        if (itemInCart == null) {
            if (selectedProd.getProdQuant() >= quant && quant >= 0) {
                if (selectedProd.getProdQuant() == 0) {
                    JOptionPane.showMessageDialog(this, "Product out of stock.", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                selectedProd.decProdQuant(quant);
                this.currentOrder.addOrderItem(selectedProd, quant, selectedSuperMarket);
            } else {
                JOptionPane.showMessageDialog(this, "Order quantity more than product availability.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else {
            int oldQuant = itemInCart.getItemQuant();
            
            if (itemInCart.getItemProduct().getProdQuant() == 0) {
                JOptionPane.showMessageDialog(this, "Product out of stock.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if (itemInCart.getItemProduct().getProdQuant() + oldQuant < quant) {
                JOptionPane.showMessageDialog(this, "Order quantity more than product availability.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            itemInCart.getItemProduct().incProdQuant(oldQuant);
            itemInCart.getItemProduct().decProdQuant(quant);

            itemInCart.setItemQuant(quant);
        }
        
        populateSupMarketProdTable();
        populateCartTable();
    }//GEN-LAST:event_btnCartActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cart item first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String modQuant = txtModifyQuant.getText();
        if (modQuant.isBlank()) {
            JOptionPane.showMessageDialog(this, "Modify quantity cannot be empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        OrderItem selectedCartItem = (OrderItem) tblCart.getValueAt(selectedRowIndex, 0);

        if (selectedCartItem == null) {
            JOptionPane.showMessageDialog(this, "Cart item not found.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int quant = 0;

        try {
            quant = Integer.parseInt(modQuant);
            if (!(quant > 0)) {
                JOptionPane.showMessageDialog(this, "Modify quantity should be greater than 0.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide a valid quantity.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int oldQuant = selectedCartItem.getItemQuant();
        
        if (selectedCartItem.getItemProduct().getProdQuant() + oldQuant < quant) {
            JOptionPane.showMessageDialog(this, "Modify quantity more than product availability.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        selectedCartItem.getItemProduct().incProdQuant(oldQuant);
        selectedCartItem.getItemProduct().decProdQuant(quant);
            
        selectedCartItem.setItemQuant(quant);
        
        populateSupMarketProdTable();
        populateCartTable();
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cart item first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        OrderItem selectedCartItem = (OrderItem) tblCart.getValueAt(selectedRowIndex, 0);

        if (selectedCartItem == null) {
            JOptionPane.showMessageDialog(this, "Cart item not found.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // The respective Product quantity is increased in the removeOrderItem method
        this.currentOrder.removeOrderItem(selectedCartItem);
        populateSupMarketProdTable();
        populateCartTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        // Check if cart is empty
        if (!(this.currentOrder.getOrderSize() > 0)) {
            JOptionPane.showMessageDialog(this, "Cart is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Add current order to the user's orders
        this.userAccount.getCustOrders().addOrder(this.currentOrder);

        // Generate email content
        StringBuilder emailBody = new StringBuilder();
        emailBody.append("<p>Hi ").append(this.userAccount.getPerson().getPersonName()).append(", thank you for placing an order with MinFoo. Your order will be delivered soon!</p>");
        emailBody.append("<table style='border-collapse: collapse; width: 100%;'>");
        emailBody.append("<thead>");
        emailBody.append("<tr>");
        emailBody.append("<th style='border: 1px solid #000; padding: 8px; text-align: left; font-weight: bold;'>Product</th>");
        emailBody.append("<th style='border: 1px solid #000; padding: 8px; text-align: left; font-weight: bold;'>Store Name</th>");
        emailBody.append("<th style='border: 1px solid #000; padding: 8px; text-align: left; font-weight: bold;'>Price</th>");
        emailBody.append("<th style='border: 1px solid #000; padding: 8px; text-align: left; font-weight: bold;'>Quantity</th>");
        emailBody.append("<th style='border: 1px solid #000; padding: 8px; text-align: left; font-weight: bold;'>Item Total</th>");
        emailBody.append("</tr>");
        emailBody.append("</thead>");
        emailBody.append("<tbody>");

        for (OrderItem orderItem : this.currentOrder.getOrderItems()) {
            Product product = orderItem.getItemProduct();
            SuperMarketEnterprise store = orderItem.getMarket();
            String price = String.valueOf(orderItem.getBuyPrice());
            String quantity = String.valueOf(orderItem.getItemQuant());
            String itemTotal = String.valueOf(orderItem.getOrderItemTotal());

            emailBody.append("<tr>");
            emailBody.append("<td style='border: 1px solid #000; padding: 8px;'>").append(product.getProdName()).append("</td>");
            emailBody.append("<td style='border: 1px solid #000; padding: 8px;'>").append(store.getOrgName()).append("</td>");
            emailBody.append("<td style='border: 1px solid #000; padding: 8px;'>").append(price).append("</td>");
            emailBody.append("<td style='border: 1px solid #000; padding: 8px;'>").append(quantity).append("</td>");
            emailBody.append("<td style='border: 1px solid #000; padding: 8px;'>").append(itemTotal).append("</td>");
            emailBody.append("</tr>");
        }

        emailBody.append("</tbody></table>");
        emailBody.append("<p>Order Total: ").append(this.currentOrder.getTransactionAmount()).append("</p>");

        // Generate email subject
        String emailSubject = "Order#" + this.currentOrder.getOrderID() + " has been placed with MinFoo";

        // Send the email
        //sendEmail("aishwaryaadusumelli07@gmail.com", emailSubject, emailBody.toString());
        sendEmail(this.userAccount.getUsername(), emailSubject, emailBody.toString());

        // Show success message
        JOptionPane.showMessageDialog(this, "Thank you for ordering. Order has been placed successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Reset the current order and update UI
        this.currentOrder = this.userAccount.getCustOrders().newOrder();
        populateSupMarketProdTable();
        populateCartTable();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void cmbSuperMarketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSuperMarketActionPerformed
        // TODO add your handling code here:
        populateSupMarketProdTable();
    }//GEN-LAST:event_cmbSuperMarketActionPerformed

    private void populateSupMarketProdTable() {
        SuperMarketEnterprise selectedSuperMarket = (SuperMarketEnterprise) cmbSuperMarket.getSelectedItem();
        
        if (selectedSuperMarket == null) {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblProductNames.getModel();
        model.setRowCount(0);

        for (Product product : selectedSuperMarket.getProductCatalog().getProductList()) {
            Object row[] = new Object[3];
            row[0] = product;
            row[1] = product.getProdPrice();
            row[2] = product.getProdQuant();
            model.addRow(row);
        }
    }
    
    private void populateSupMarketProdTable(String searchProdName, SuperMarketEnterprise selectedSuperMarket) {
        if (selectedSuperMarket == null) {
            return;
        }
        
        Product searchProduct = selectedSuperMarket.getProductCatalog().checkProdInList(searchProdName);
        
        DefaultTableModel model = (DefaultTableModel) tblProductNames.getModel();
        model.setRowCount(0);
        
        Object row[] = new Object[3];
        row[0] = searchProduct;
        row[1] = searchProduct.getProdPrice();
        row[2] = searchProduct.getProdQuant();
        model.addRow(row);
    }
    
    private void populateSupMarketCombobox() {
        cmbSuperMarket.removeAllItems();
        
        for (SuperMarketEnterprise market : this.allSupermarkets) {
            cmbSuperMarket.addItem(market);
        }
    }
    
    private void populateCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);

        for (OrderItem orderItem : this.currentOrder.getOrderItems()) {
            Object row[] = new Object[5];
            row[0] = orderItem;
            row[1] = orderItem.getItemQuant();
            row[2] = orderItem.getBuyPrice();
            row[3] = orderItem.getOrderItemTotal();
            row[4] = orderItem.getMarket();
            model.addRow(row);
        }
    }
    
    public void startAdv() {
        // Initialize and start the AdvertisementDisplay thread
        adDisplay = new AdvertisementDisplay(this.custAdvList, imageAdvertisement, this.userAccount.getUsername());
    }
    
    public void stopAdv() {
        // Stop the running advertisements
        this.adDisplay.stopAdvertisementDisplay();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCart;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox cmbSuperMarket;
    private javax.swing.JLabel imageAdvertisement;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSuperMarket;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductNames;
    private javax.swing.JTextField txtModifyQuant;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
