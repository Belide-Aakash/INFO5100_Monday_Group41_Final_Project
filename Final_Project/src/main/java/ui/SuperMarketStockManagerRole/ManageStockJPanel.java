/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SuperMarketStockManagerRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Network.Network;
import Business.OrderManagement.Order;
import Business.OrderManagement.OrderItem;
import Business.ProductManagement.Product;
import Business.ProductManagement.ProductCatalog;
import Business.StockManagement.Stock;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author kotag
 */
public class ManageStockJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network network;
    ProductCatalog productCatalog;
    ArrayList<Stock> currentProdList;

    /**
     * Creates new form ManageStockJPanel
     */
    public ManageStockJPanel(JPanel userProcessContainer, Network network, ProductCatalog productCatalog) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.productCatalog = productCatalog;
        
        this.currentProdList = new ArrayList<Stock>();
        
        JTableHeader header = tblProductCatalog.getTableHeader();
        JTableHeader header1 = tblCart.getTableHeader();
        
        // Customize the header background and text color
        header.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                
                JLabel label = (JLabel) super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
                
                // Set background color
                label.setBackground(new Color(0,153,255)  );
                // Set text color
                label.setForeground(Color.WHITE);
                // Set font style and size
                label.setFont(new Font("Helvetica Neue", Font.BOLD, 14));
                
                return label;
            }
        });
        
        populateSupplierCombobox();
        populateSupplierProductTable();
        populateCartTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearchProduct = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        txtNewQuantity = new javax.swing.JTextField();
        btnModifyQuantity = new javax.swing.JButton();
        lblSalesPrice = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        btnRemoveOrderItem = new javax.swing.JButton();
        lblQuantity = new javax.swing.JLabel();
        btnCheckOut = new javax.swing.JButton();
        spnQuantity = new javax.swing.JSpinner();
        lblSupplier = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        cmbSupplier = new javax.swing.JComboBox();
        txtSearch = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();

        btnSearchProduct.setBackground(new java.awt.Color(0, 153, 255));
        btnSearchProduct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnSearchProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchProduct.setText("Search Product");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Quantity", "Price", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        tblProductCatalog.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product Name", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductCatalog);

        btnModifyQuantity.setBackground(new java.awt.Color(0, 153, 255));
        btnModifyQuantity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnModifyQuantity.setForeground(new java.awt.Color(255, 255, 255));
        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        lblSalesPrice.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblSalesPrice.setText("Sales Price:");

        btnRemoveOrderItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.setBorder(null);
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        lblQuantity.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblQuantity.setText("Quantity:");

        btnCheckOut.setBackground(new java.awt.Color(0, 153, 255));
        btnCheckOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCheckOut.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckOut.setText("Checkout");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        spnQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lblSupplier.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblSupplier.setText("Supplier:");

        btnAddToCart.setBackground(new java.awt.Color(0, 153, 255));
        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddToCart.setForeground(new java.awt.Color(255, 255, 255));
        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        cmbSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSupplierActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 153, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 102));

        Title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Manage Stock");

        btnBack.setBackground(new java.awt.Color(0, 153, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/arrow.png"))); // NOI18N
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(btnBack)
                .addGap(329, 329, 329)
                .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addGap(390, 390, 390))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSupplier)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnModifyQuantity)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(btnSearchProduct))
                                .addComponent(btnRemoveOrderItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSalesPrice)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(167, 167, 167)
                                    .addComponent(lblQuantity)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalesPrice)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity)
                    .addComponent(spnQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddToCart))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveOrderItem)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity))
                .addGap(30, 30, 30)
                .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed
        // TODO add your handling code here:
        String productName = txtSearch.getText();
        SupplierEnterprise selectedSupplier = (SupplierEnterprise) cmbSupplier.getSelectedItem();
        
        if (productName.isBlank()) {
            JOptionPane.showMessageDialog(this, "Please type a valid product name.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedSupplier == null) {
            JOptionPane.showMessageDialog(this, "Please select a supplier from drop down.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        populateSupplierProductTable(productName, selectedSupplier);
    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an product stock item from the lower table first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // This is the stock item in the cart
        Stock stockItem = (Stock) tblCart.getValueAt(selectedRowIndex, 0);
        
        int quant = 0;
        
        try {
            quant = Integer.parseInt(txtNewQuantity.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please check modified quantity field.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // This is the supplier stock from supplier catalog
        Stock stock = stockItem.getStockProd();
        
        int oldQuant = stockItem.getStockQuant();
        
        if (stock.getStockQuant() + oldQuant < quant) {
            JOptionPane.showMessageDialog(this, "Please check product stock availability.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        stock.incStockQuant(oldQuant);
        stock.decStockQuant(quant);
            
        stockItem.setStockQuant(quant);
            
        populateSupplierProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an product stock item form the lower table first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Stock stockItem = (Stock) tblCart.getValueAt(selectedRowIndex, 0);
        
        stockItem.getStockProd().incStockQuant(stockItem.getStockQuant());
        
        this.currentProdList.remove(stockItem);
        
        populateSupplierProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        int cartSize = this.currentProdList.size();
        
        if (!(cartSize>0)) {
            JOptionPane.showMessageDialog(this, "Cart is empty.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        for(Stock stockItem : this.currentProdList) {
            this.productCatalog.addProduct(stockItem.getStockName(), stockItem.getStockQuant(), stockItem.getStockPrice());    
        }
        
        this.currentProdList = new ArrayList<Stock>();
       
        populateSupplierCombobox();
        populateSupplierProductTable();
        populateCartTable();

        txtNewQuantity.setText("");
        txtSalesPrice.setText("");
        txtSearch.setText("");

        spnQuantity.setValue(0);

        JOptionPane.showMessageDialog(this, "Thank you for your purchase. Looking forward to see you again!", "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblProductCatalog.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product first.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // This is the supplier stock from supplier catalog
        Stock stock = (Stock) tblProductCatalog.getValueAt(selectedRowIndex, 0);
        float salesPrice = 0;
        int quant = 0;
        
        try {
            salesPrice = Float.parseFloat(txtSalesPrice.getText());
            quant = (Integer) spnQuantity.getValue();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the price and quantity fields.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (!(salesPrice > 0)) {
            JOptionPane.showMessageDialog(this, "Sales price can only be positive.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // This is the stock item in the cart
        Stock stockItem = getStockInOrder(stock);
        
        SupplierEnterprise selectedSupplier = (SupplierEnterprise) cmbSupplier.getSelectedItem();
        
        if (selectedSupplier == null) {
            JOptionPane.showMessageDialog(this, "Select a supplier from the drop down.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (quant == 0) {
            JOptionPane.showMessageDialog(this, "Quantity cannot be 0.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (stockItem == null) {
            if (stock.getStockQuant() >= quant && quant >= 0) {
                if (stock.getStockQuant() == 0) {
                    JOptionPane.showMessageDialog(this, "Product out of stock.", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                Stock newstockItem = new Stock(stock, stock.getStockName(), quant, salesPrice, selectedSupplier.getOrgName());
                this.currentProdList.add(newstockItem);
                stock.decStockQuant(quant);
            } else {
                JOptionPane.showMessageDialog(this, "Order quantity more than product stock availability.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else {
            int oldQuant = stockItem.getStockQuant();
            if (stock.getStockQuant() == 0) {
                JOptionPane.showMessageDialog(this, "Product out of stock.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (stockItem.getStockProd().getStockQuant() + oldQuant < quant) {
                JOptionPane.showMessageDialog(this, "Order quantity more than product stock availability.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            stock.incStockQuant(oldQuant);
            stock.decStockQuant(quant);
            
            stockItem.setStockQuant(quant);
            stockItem.setStockPrice(salesPrice);
        }
        populateSupplierProductTable();
        populateCartTable();
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        int cartSize = this.currentProdList.size();
        ArrayList<Stock> tmpProdList = this.currentProdList;
        if (cartSize != 0) {
            for (Stock stockItem : tmpProdList) {
                stockItem.getStockProd().incStockQuant(stockItem.getStockQuant());
        
                this.currentProdList.remove(stockItem);
            }
        }
        
        
        
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSupplierActionPerformed
        // TODO add your handling code here:
        populateSupplierProductTable();
    }//GEN-LAST:event_cmbSupplierActionPerformed

    private void populateSupplierCombobox() {
        cmbSupplier.removeAllItems();
        
        for (Enterprise e : this.network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getEnterpriseType()==Enterprise.EnterpriseType.Supplier) {
                cmbSupplier.addItem(e);
            }
        }
    }
    
    private Stock getStockInOrder(Stock searchStock) {
        for (Stock s: this.currentProdList) {
            if (s.getStockProd().equals(searchStock)) {
                return s;
            }
        }
        return null;
    }
    
    private void populateSupplierProductTable() {
        SupplierEnterprise selectedSupplier = (SupplierEnterprise) cmbSupplier.getSelectedItem();
        
        if (selectedSupplier == null) {
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        for (Stock stock : selectedSupplier.getStockCatalog().getStockList()) {
            Object row[] = new Object[3];
            row[0] = stock;
            row[1] = stock.getStockPrice();
            row[2] = stock.getStockQuant();
            model.addRow(row);
        }
    }
    
    private void populateSupplierProductTable(String searchProdName, SupplierEnterprise selectedSupplier) {
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);
        
        Stock searchStock = selectedSupplier.getStockCatalog().checkStockInList(searchProdName);
        
        if (searchStock == null) {
            return;
        }
        
        Object row[] = new Object[3];
        row[0] = searchStock;
        row[1] = searchStock.getStockPrice();
        row[2] = searchStock.getStockQuant();
        model.addRow(row);
    }
    
    private void populateCartTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);

        for (Stock cartStock : currentProdList) {
            Object row[] = new Object[4];
            row[0] = cartStock;
            row[1] = cartStock.getStockQuant();
            row[2] = cartStock.getStockPrice();
            row[3] = cartStock.getStockSupplier();
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JComboBox cmbSupplier;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblSalesPrice;
    private javax.swing.JLabel lblSupplier;
    private javax.swing.JSpinner spnQuantity;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JTextField txtSalesPrice;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
